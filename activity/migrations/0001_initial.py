# Generated by Django 4.2 on 2024-11-03 17:04

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_begin_date', models.DateField(verbose_name='活动开始日期(活动第一天)')),
                ('activity_end_date', models.DateField(verbose_name='活动结束日期(活动最后一天)')),
                ('activity_return_time', models.TimeField(null=True, verbose_name='返程集合时间')),
                ('activity_return_loc', models.CharField(max_length=70, null=True, verbose_name='返程集合位置')),
                ('signup_ddl_date', models.DateField(verbose_name='截止报名日期(当天23:59截止报名)')),
                ('lock_ddl_date', models.DateField(verbose_name='锁票日期(当天23:59锁票)')),
                ('status', models.IntegerField(choices=[(0, '未截止报名'), (1, '已截止未锁票'), (2, '已锁票')], default=0, verbose_name='活动状态')),
                ('target_participant', models.IntegerField(verbose_name='目标报名人数')),
                ('current_participant', models.IntegerField(default=0, verbose_name='当前报名人数')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '活动',
                'verbose_name_plural': '活动',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_name', models.CharField(max_length=100, unique=True, verbose_name='地区名称')),
                ('city_name', models.CharField(max_length=100, verbose_name='所属城市名称')),
            ],
            options={
                'verbose_name': '区域',
                'verbose_name_plural': '区域',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='学校名称')),
            ],
            options={
                'verbose_name': '合作院校',
                'verbose_name_plural': '合作院校',
            },
        ),
        migrations.CreateModel(
            name='Skiresort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='滑雪场名')),
                ('location', models.CharField(max_length=300, verbose_name='位置')),
                ('opening', models.CharField(max_length=200, verbose_name='营业时间')),
                ('phone', models.CharField(max_length=11, verbose_name='电话')),
                ('intro', models.CharField(max_length=25, verbose_name='简介')),
                ('cover', models.ImageField(upload_to='skiresortpic/', verbose_name='封面图片')),
                ('slope', models.CharField(help_text='请用形如这样的格式来表示雪道的组成: "初级道-3 中级道-5 高级道-2"', max_length=200, validators=[django.core.validators.RegexValidator('^(初级道\\-\\d+) (中级道\\-\\d+) (高级道\\-\\d+)$', '请用形如这样的格式来表示雪道的组成: "初级道-3 中级道-5 高级道-2"')], verbose_name='雪道组成')),
                ('detail', models.TextField(blank=True, null=True, verbose_name='详细介绍')),
                ('detailpic', models.ImageField(blank=True, null=True, upload_to='skiresortpic/', verbose_name='详细介绍（电商长图形势）')),
                ('website', models.CharField(blank=True, max_length=500, null=True, verbose_name='官网URL')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activity.area', verbose_name='所在地区')),
            ],
            options={
                'verbose_name': '滑雪场',
                'verbose_name_plural': '滑雪场',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intro', models.CharField(max_length=25, null=True, verbose_name='简介')),
                ('service', models.CharField(help_text='请使用空格分隔各个服务。可选服务有：滑雪门票 往返车票 酒店住宿 雪具租赁 人身保险', max_length=100, validators=[django.core.validators.RegexValidator('^((滑雪门票|往返车票|酒店住宿|雪具租赁|人身保险) )*(滑雪门票|往返车票|酒店住宿|雪具租赁|人身保险)$', '请使用空格分隔各个服务。可选服务有：滑雪门票 往返车票 酒店住宿 雪具租赁 人身保险')], verbose_name='提供的服务')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(1)], verbose_name='单价')),
                ('original_price', models.DecimalField(decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='原价')),
                ('sales', models.IntegerField(default=0, verbose_name='已售出个数')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.activity', verbose_name='活动')),
            ],
            options={
                'verbose_name': '票',
                'verbose_name_plural': '票',
            },
        ),
        migrations.CreateModel(
            name='SkiresortPic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pic', models.ImageField(upload_to='skiresortpic/', verbose_name='图片')),
                ('skiresort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activity.skiresort', verbose_name='对应的滑雪场')),
            ],
            options={
                'verbose_name': '滑雪场摄影',
                'verbose_name_plural': '滑雪场摄影',
            },
        ),
        migrations.CreateModel(
            name='Bustype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passenger_num', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='可承载人数')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(1)], verbose_name='单价')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.activity', verbose_name='活动')),
            ],
            options={
                'verbose_name': '大巴车类型(只支持两种类型)',
                'verbose_name_plural': '大巴车类型(只支持两种类型)',
            },
        ),
        migrations.CreateModel(
            name='BoardingLocTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campus', models.CharField(max_length=150, unique=True, verbose_name='学校位置(学校名+校区)')),
                ('busboardloc', models.CharField(max_length=150, null=True, verbose_name='上车点(学校名+校区+门)')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activity.area', verbose_name='所在地区')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='activity.school', verbose_name='学校名称')),
            ],
            options={
                'verbose_name': '上车点可选范围',
                'verbose_name_plural': '上车点可选范围',
            },
        ),
        migrations.CreateModel(
            name='AreaBoardingLowerLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lower_limit', models.IntegerField(verbose_name='下限人数')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.activity', verbose_name='活动')),
                ('area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='activity.area', verbose_name='所在地区')),
            ],
            options={
                'verbose_name': '区域上车下限',
                'verbose_name_plural': '区域上车下限',
            },
        ),
        migrations.CreateModel(
            name='ActivityWxGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qrcode', models.ImageField(upload_to='activity/wxgroup/', verbose_name='二维码')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activity.activity', verbose_name='活动')),
            ],
            options={
                'verbose_name': '微信群二维码',
                'verbose_name_plural': '微信群二维码',
            },
        ),
        migrations.CreateModel(
            name='ActivityTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='示例：“翠云山银河滑雪场两日票” (雪场+天数， 20字以内)', max_length=20, null=True, verbose_name='活动名称')),
                ('duration_days', models.IntegerField(verbose_name='持续天数')),
                ('detail', models.TextField(null=True, verbose_name='活动详情')),
                ('schedule', models.TextField(null=True, verbose_name='行程安排(详细说明)')),
                ('attention', models.TextField(blank=True, null=True, verbose_name='注意事项')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('schedule_lite', models.CharField(blank=True, help_text='请用形如这样的格式来表示行程安排: "第一天9点:出发 第一天11点:到达 第一天16点:返程"', max_length=300, null=True, validators=[django.core.validators.RegexValidator('^(\\S+:\\S+ )*(\\S+:\\S+)$', '请用形如这样的格式来表示行程安排: "第一天9点:出发 第一天11点:到达 第一天16点:返程"')], verbose_name='行程安排文字简述 (该字段暂时弃用)')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('ski_resort', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.skiresort', verbose_name='滑雪场')),
            ],
            options={
                'verbose_name': '活动模板',
                'verbose_name_plural': '活动模板',
            },
        ),
        migrations.AddField(
            model_name='activity',
            name='activity_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.activitytemplate', verbose_name='对应活动模板'),
        ),
        migrations.CreateModel(
            name='Boardingloc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_peoplenum', models.IntegerField(default=0, verbose_name='已选择人数')),
                ('target_peoplenum', models.IntegerField(verbose_name='最低选择人数')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.activity', verbose_name='活动')),
                ('loc', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='activity.boardingloctemplate', verbose_name='上车点')),
            ],
            options={
                'verbose_name': '上车点',
                'verbose_name_plural': '上车点',
                'unique_together': {('activity', 'loc')},
            },
        ),
    ]
